services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    command: [ "server", "-dev", "-dev-root-token-id=root", "-config=/vault/config/vault.hcl" ]
    environment:
      SKIP_CHOWN: "true"
      VAULT_DEV_ROOT_TOKEN_ID: "root"
      VAULT_ADDR: http://127.0.0.1:8200
      VAULT_API_ADDR: http://127.0.0.1:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - ./local-dev/vault/config:/vault/config:ro
      - ./local-dev/vault/policies:/vault/policies:ro
      - ./local-dev/vault/logs:/vault/logs
      - ./local-dev/vault/init:/vault/init
    healthcheck:
      test: [ "CMD-SHELL", "VAULT_ADDR=http://127.0.0.1:8200 vault status >/dev/null 2>&1 && exit 0 || exit 1" ]
      interval: 3s
      timeout: 2s
      retries: 30
      start_period: 10s
    networks:
      - local-dev-net
    
    # One-shot initializer container:  
    # 1) Initializes & unseals the cluster (stores token/unseal keys locally),
    # 2) Enables KV v2 at "secret/",
    # 3) Writes an example secret,
    # 4) Creates a policy & AppRole for Spring Boot.
#  vault-init:
#    image: hashicorp/vault:latest
#    container_name: vault-init
#    profiles: [ "infrastructure" ]
#    depends_on:
#      vault:
#        condition: service_started
#    entrypoint: [ "/bin/sh",  "-c" ]
#    command: "/vault/init/init.sh"
#    environment:
#      VAULT_ADDR: http://vault:8200
#    volumes:
#      - ./local-dev/vault/policies:/vault/policies:ro
#      - ./local-dev/vault/init:/vault/init
#      - ./local-dev/vault/file:/vault/file
#    networks:
#      - local-dev-net

networks:
  local-dev-net:
    driver: bridge
    name: local-dev-network  